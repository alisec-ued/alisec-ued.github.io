<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alisec-ued.github.io/"/>
  <updated>2016-11-28T03:10:32.000Z</updated>
  <id>https://alisec-ued.github.io/</id>
  
  <author>
    <name>alisec-ued</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解Redux数据流(二)</title>
    <link href="https://alisec-ued.github.io/2016/11/28/%E5%9B%BE%E8%A7%A3Redux%E6%95%B0%E6%8D%AE%E6%B5%81(%E4%BA%8C)/"/>
    <id>https://alisec-ued.github.io/2016/11/28/图解Redux数据流(二)/</id>
    <published>2016-11-27T17:17:40.000Z</published>
    <updated>2016-11-28T03:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章回答了前两个问题，而这一篇则回答最后一个问题。</p>
<h2 id="Redux如何使用？"><a href="#Redux如何使用？" class="headerlink" title="Redux如何使用？"></a>Redux如何使用？</h2><p>前一篇文章描述了Redux的基本要素，并且梳理了一下Redux的数据流动图</p>
<p><img src="https://img.alicdn.com/tps/TB1vRLKOpXXXXacaXXXXXXXXXXX-889-271.png" alt="Alt text"></p>
<p>首先，我们的View上体现出的任何操作或者事件都会调用Dispatch方法触发Action<br>Action 会告知了type和data<br>然后，Store自动调用Reducer，并且传入两个参数：当前 State和收到的Action。 Reducer会返回新的State 。并且这个过程是纯函数式的，返回的结果由入参决定，不会随着外界的变化而改变。</p>
<p>知道概念了，那么我们从代码层面如何搭建出Redux数据流的架构呢？</p>
<a id="more"></a>
<h3 id="最基本的Redux数据流"><a href="#最基本的Redux数据流" class="headerlink" title="最基本的Redux数据流"></a>最基本的Redux数据流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;</div><div class="line">  	<span class="attr">items</span>: []</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action = &#123;&#125;</span>) =&gt;</span> &#123;  </div><div class="line"><span class="keyword">const</span> &#123; type &#125; = action;</div><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"ADD_ITEM"</span>:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">items</span>: state.items.concat(action.item)</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"GET_ITEM_LIST"</span>:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">items</span>: action.items</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer)</div><div class="line"></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(store.getState())</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'GET_ITEM_LIST'</span>,<span class="string">'items'</span>:[&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'test'</span>&#125;]&#125;)</div><div class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,<span class="string">'item'</span>:[&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'test2'</span>&#125;]&#125;)</div><div class="line"></div></pre></td></tr></table></figure>
<p>这个代码段是最简单的Redux数据流例子，把创建Store、ActionCreator、Reducer全放在了一个文件中，在实际项目中，这当然不可取。<br>其实每个Redux的实体概念都可以拆解成一个单独的文件去管理。<br>在项目中为了项目的规范化，我们可以对所有的action_type常量进行统一的管理，放到单独的文件中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> GET_ITEM_LIST = <span class="string">'GET_ITEM_LIST'</span></div><div class="line"><span class="keyword">const</span> ADD_ITEM = <span class="string">'ADD_ITEM'</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>当然，也许最需要进行拆分是Reducer，在有些规模的实际项目中，state往往比较庞大。对于Reducer而言，我们最好根据相应的业务需求拆分出不同Reducer来管理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore,combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> itemReducer = <span class="function">(<span class="params">state = &#123;&#125;, action = &#123;&#125;</span>) =&gt;</span> &#123;  </div><div class="line">	<span class="keyword">const</span> &#123; type &#125; = action;</div><div class="line">	<span class="keyword">switch</span> (type) &#123;</div><div class="line">	    <span class="keyword">case</span> <span class="string">"ADD_ITEM"</span>:</div><div class="line">	      <span class="keyword">return</span> &#123;</div><div class="line">		      ...state,</div><div class="line">		      <span class="attr">items</span>: state.items.concat(action.item)</div><div class="line">		  &#125;</div><div class="line">	      <span class="keyword">break</span>;</div><div class="line">	    <span class="keyword">case</span> <span class="string">"DELETE_ITEM"</span>:</div><div class="line">	      <span class="keyword">return</span> &#123;</div><div class="line">		      ...state,</div><div class="line">		      <span class="attr">items</span>: state.items.filter(<span class="function">(<span class="params">item</span>)=&gt;</span> &#123;</div><div class="line">		        <span class="keyword">return</span> !(item.id === action.itemId);</div><div class="line">		      &#125;)</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">break</span>;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ListReducer = <span class="function">(<span class="params">state = &#123;items: []&#125;, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123; type &#125; = action;</div><div class="line">	<span class="keyword">switch</span> (type) &#123;</div><div class="line">	    <span class="keyword">case</span> <span class="string">"GET_ITEM_LIST"</span>:</div><div class="line">		  <span class="keyword">return</span> &#123;</div><div class="line">		      ...state,</div><div class="line">		      <span class="attr">items</span>: action.items</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">break</span>;</div><div class="line">	    <span class="keyword">case</span> <span class="string">"CLEAR_ITEM_LIST"</span>:</div><div class="line">	      <span class="keyword">return</span> &#123;</div><div class="line">		      ...state,</div><div class="line">		      <span class="attr">items</span>: []</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">break</span>;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;itemReducer,ListReducer&#125;)</div><div class="line"></div></pre></td></tr></table></figure>
<p>可以看到，Redux其实本身也提供了combineReducers方法来帮助开发者合并Reducer，可以让每个Reducer互相独立。</p>
<h3 id="Middleware中间件"><a href="#Middleware中间件" class="headerlink" title="Middleware中间件"></a>Middleware中间件</h3><p>Redux中，一切数据都是从一个状态到另一个状态，那么也许我们需要在这个状态间添加一些自己的方法或者功能呢？<br>这个时候就需要Middleware，Middleware发生在发送Action时，也就是调用store.dispatch()。<br>在Middleware中，我们通过调用next(action)函数就可以把Action传递给Reducer。<br>例如一个典型的简易版redux-logger模块，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;</div><div class="line">  	<span class="attr">items</span>: []</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action = &#123;&#125;</span>) =&gt;</span> &#123;  </div><div class="line"><span class="keyword">const</span> &#123; type &#125; = action;</div><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"ADD_ITEM"</span>:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">	     ...state,</div><div class="line">	      <span class="attr">items</span>: state.items.concat(action.item)</div><div class="line">	  &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"GET_ITEM_LIST"</span>:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">	     ...state,</div><div class="line">	      <span class="attr">items</span>: action.items</div><div class="line">	  &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reduxlog = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`prev state`</span>, store.getState())</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`action:`</span>, action.type)</div><div class="line">  next(action)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`next state`</span>,store.getState())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer, initialState, applyMiddleware(reduxlog))</div><div class="line"></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(store.getState())</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'GET_ITEM_LIST'</span>,<span class="string">'items'</span>:[&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'test'</span>&#125;]&#125;)</div><div class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,<span class="string">'item'</span>:[&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'test2'</span>&#125;]&#125;)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="https://img.alicdn.com/tps/TB1j2nuOpXXXXXTapXXXXXXXXXX-840-260.png" alt="Alt text"></p>
<p>中间件处理了改变前和改变后的状态，写法也非常容易理解，如果有业务需要对状态集中处理，通过中间件的方式也不失为一种选择。<br>文章头部的那张图，如果加上中间件，就是这样：</p>
<p><img src="https://img.alicdn.com/tps/TB1BEr9OpXXXXbnXXXXXXXXXXXX-889-287.png" alt="Alt text"></p>
<h3 id="中间件的顺序"><a href="#中间件的顺序" class="headerlink" title="中间件的顺序"></a>中间件的顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(thunk, promise, logger)</div><div class="line">);</div><div class="line"></div></pre></td></tr></table></figure>
<p>中间件的调用顺序其实还是有一定讲究，这就要从Middleware本身的设计思想来说明。<br>Redux深受函数式编程的影响，中间件的设计也不例外，</p>
<blockquote>
<p>middleware 的设计有点特殊，是一个层层包裹的匿名函数，这其实是函数式编程中的柯里化 curry，一种使用匿名单参数函数来实现多参数函数的方法。applyMiddleware 会对 logger 这个 middleware 进行层层调用，动态地对 store 和 next 参数赋值。</p>
</blockquote>
<p>Redux的applyMiddleware会将所有的中间件组合串联，</p>
<blockquote>
<p>compose 将 chain 中的所有匿名函数，[f1, f2, … , fx, …, fn]，组装成一个新的函数，即新的 dispatch，当新 dispatch 执行时，[f1, f2, … , fx, …, fn]，从左到右依次执行（ 所以顺序很重要）</p>
</blockquote>
<p>具体中间件的实现思路不详细展开，知乎上有一篇专栏分析的很到位，有兴趣可以看一下 <a href="https://zhuanlan.zhihu.com/p/20597452#!" target="_blank" rel="external">链接</a></p>
<p>上面的例子里如果logger中间件不放置在最后面，输出结果会不正确。</p>
<h3 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h3><p>刚刚我们看了那么多示例代码？但是至此，Redux一直没有解决异步的问题。试想，如果我在页面输入一段内容，然后触发了一个动作，此时需要向服务端请求数据并将返回的数据展示出来。这是一个很常见的需求，但是涉及到异步请求，刚刚的示例中的方法已经不再适用了。那么Redux是如何解决异步问题的呢？</p>
<p>没错，还是<strong>Middleware</strong>，Middleware只关注dispatch函数的传递，至于在传递的过程中干了什么中间件并不关心。<br>这里不得不提<strong>redux-thunk</strong>这个中间件</p>
<p>redux-thunk的基本思想就是通过函数来封装异步请求，也就是说在actionCreater中返回一个函数，在这个函数中进行异步调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</div><div class="line">thunk.withExtraArgument = createThunkMiddleware;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</div><div class="line"></div></pre></td></tr></table></figure>    
<p>其实打开redux-thunk的源码看一下，讲真代码量就十几行，那么这里做了什么处理呢？<br>其实关键的就一句代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</div><div class="line"> &#125;</div><div class="line"></div></pre></td></tr></table></figure>         
<p>我们知道Action正常其实返回的是一个js对象，如果没有经过Middleware的处理，是不符合Redux逻辑，会抛出异常的，<strong>所以redux-thunk只做了一件事件</strong>，<strong>那就是让Action能够兼容 return 函数</strong>，redux-thunk内部再去消化掉这个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch, getState</span>) </span>&#123;</div><div class="line">        api.fetch(data).then(<span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</div><div class="line">            dispatch(json);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>    
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上是最近一段时间通过在业务不断实践，然后学习和思考的总结。</p>
<p>在这期间发现，很多东西需要事先去积累，要拓宽自己的视野，如果自己不知道某种设计思路并且没有相关经验时，很难想到点上。</p>
<p>技术与业务是相辅相成的，技术能够很好的帮助自己拓宽视野，能设计更好的项目架构；而业务能够让技术得以实践，并且发现技术上可能还存在的问题，从而积累经验。</p>
<p>这个思路我通过这段时间的学习感悟到的，今后的学习也会沿着这个思路走下去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章回答了前两个问题，而这一篇则回答最后一个问题。&lt;/p&gt;
&lt;h2 id=&quot;Redux如何使用？&quot;&gt;&lt;a href=&quot;#Redux如何使用？&quot; class=&quot;headerlink&quot; title=&quot;Redux如何使用？&quot;&gt;&lt;/a&gt;Redux如何使用？&lt;/h2&gt;&lt;p&gt;前一篇文章描述了Redux的基本要素，并且梳理了一下Redux的数据流动图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1vRLKOpXXXXacaXXXXXXXXXXX-889-271.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，我们的View上体现出的任何操作或者事件都会调用Dispatch方法触发Action&lt;br&gt;Action 会告知了type和data&lt;br&gt;然后，Store自动调用Reducer，并且传入两个参数：当前 State和收到的Action。 Reducer会返回新的State 。并且这个过程是纯函数式的，返回的结果由入参决定，不会随着外界的变化而改变。&lt;/p&gt;
&lt;p&gt;知道概念了，那么我们从代码层面如何搭建出Redux数据流的架构呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://alisec-ued.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>图解Redux数据流(一)</title>
    <link href="https://alisec-ued.github.io/2016/11/23/%E5%9B%BE%E8%A7%A3Redux%E6%95%B0%E6%8D%AE%E6%B5%81(%E4%B8%80)/"/>
    <id>https://alisec-ued.github.io/2016/11/23/图解Redux数据流(一)/</id>
    <published>2016-11-23T06:37:31.000Z</published>
    <updated>2016-11-28T03:09:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章我只介绍3个问题</p>
<ol>
<li>什么是Redux？</li>
<li>为什么是Redux？</li>
<li>Redux如何使用？</li>
</ol>
<p>##什么是Redux?<br>你们可以看看官网的解释，<br>但是呢，</p>
<p><img src="https://img.alicdn.com/tps/TB1JuYfNVXXXXbmaXXXXXXXXXXX-801-259.jpg" alt="Alt text"></p>
<p>我想没有接触过的人一看肯定一脸懵逼。<br>那么什么是Redux呢？<br>一句话概括，<strong>redux只是一个实现了Flux思想的数据流框架。</strong><br>既然是一个数据流框架，那么数据是如何流动的？</p>
<p><img src="https://img.alicdn.com/tps/TB1kYfaNVXXXXcLaXXXXXXXXXXX-604-352.png" alt="Alt text"></p>
<a id="more"></a>
<p><strong>所谓 Redux，就是将动作(action) 变换成 state 转换函数(reducer)，然后放到一个统一的地方(store)来 setState 而已。</strong></p>
<p>我个人理解的Redux，其特性有3个：</p>
<ol>
<li><strong>单向性</strong><ul>
<li>单向数据流其实并不是redux的特性，而是react本身的思想。这个下面有例子会说明。</li>
</ul>
</li>
<li><strong>唯一性</strong><ul>
<li>指的是应用的数据都会集中存储在一个地方，这个数据Store就像一个<strong>池子</strong>，任何组件都可以通过固定的管道来传输或者获取这个<strong>池子</strong>里面的数据</li>
</ul>
</li>
<li><strong>时间旅行</strong><ul>
<li>这个“时间旅行”另外的意思是可预测（predictable），即容易理解的代码。在redux里，<strong>任何一个数据都有状态</strong>。一个用户操作或者程序需要去修改数据，都必须触发Action，这时在redux看来，其实数据是从一个状态，变化成另一个状态。这么一来，数据就变得可预测，可以知道数据的<strong>前置状态(prev state)</strong>和<strong>后置状态(next state)</strong>分别是什么，如果在这里加上单元测试，也是极其容易的一件事情。</li>
</ul>
</li>
</ol>
<p><img src="https://img.alicdn.com/tps/TB1_62kNVXXXXauaXXXXXXXXXXX-2460-166.png" alt="Alt text"></p>
<p>##为什么是redux<br>曾经有一篇文章叫做<a href="http://www.zcfy.cc/article/you-might-not-need-redux-1334.html" target="_blank" rel="external">《you-might-not-need-redux》</a><br>这篇文章的开头直接揭露了开发者使用redux最为头疼的事情。</p>
<blockquote>
<p>为什么因为一个简单的功能，我需要创建三个文件？到底是为什么？</p>
</blockquote>
<p>那么我们为什么要使用redux呢？<br>Redux的确限定了开发者如何去编写程序。</p>
<blockquote>
<p>Redux提供了一个权衡方案。它规定：</p>
<pre><code>- 用简单的对象和数组来描述应用状态
- 用简单的对象来描述应用中的状态变化
- 用纯函数来描述应用中逻辑变化
</code></pre></blockquote>
<p>这意味着你必须遵循一定的规则才可以让你的程序走通。对应的三个文件分别是<strong>Action</strong>，<strong>Reducer</strong>，<strong>Store</strong>，同时也是Redux最重要的3个概念。</p>
<p>###Action<br>官方的介绍：</p>
<blockquote>
<p>Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().</p>
</blockquote>
<p>翻译成中文：</p>
<blockquote>
<p>Actions 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。用法是通过 store.dispatch() 把 action 传到 store。</p>
</blockquote>
<p>还是一脸懵逼？对了，忘了跟你们说了，其实你可以<strong>完全无视</strong>上面的解释。<br>下面我们来玩一个角色扮演的游戏，而我，是导演。哈哈。<br>我们一起来模拟一个战场上情报通讯的场景。</p>
<blockquote>
<p>我：咳咳， Action！你过来，你来当<strong>电报员</strong>。如果战场上有消息，立马给我翻译成<strong>电码</strong>发给我，你知道了吗？<br>Action：yes,sir<br><img src="https://img.alicdn.com/tps/TB1gM_CNVXXXXbLXpXXXXXXXXXX-115-123.png" alt="Alt text"></p>
</blockquote>
<p>###Dispatch<br>Dispatch其实是Redux中三大主角之一Store的亲儿子，但是作为皇子，老子都上了，儿子能不上吗？</p>
<blockquote>
<p>导演：Dispatch！你作为Store的亲儿子，虽然其它能力不行，但至少接电报应该会把。<br>Dispatch：哎，会一点啦会一点<br>我：好，那你给我当<strong>接线员</strong>，给我把Action发给我们的电报转发给Reducer<br> <img src="https://img.alicdn.com/tps/TB14iTtNVXXXXb7XFXXXXXXXXXX-203-176.png" alt="Alt text"></p>
</blockquote>
<p>###Reducer</p>
<blockquote>
<p>我：Reducer！你作为司令（Store）的亲信，帮他处理电报吧。<br>Reducer：这是我的荣幸。<br>我：那好，我认命你为司令部<strong>秘书长</strong>，根据Dispatch转送的电报报头来规整消息，包括筛选和过滤。<br>Reducer：no problem<br><img src="https://img.alicdn.com/tps/TB1Og2INVXXXXavXpXXXXXXXXXX-87-157.png" alt="Alt text"></p>
</blockquote>
<p>###Store</p>
<blockquote>
<p>我：尊敬的<strong>司令</strong>先生，我已经为你分配好了所有情报工作人员，您将会根据这些情报制定战略，然后部署下一步行动。<br>Store：嗯，很好。<br><img src="https://img.alicdn.com/tps/TB1f46CNVXXXXX9XFXXXXXXXXXX-241-193.png" alt="Alt text"></p>
</blockquote>
<p>好了，角色分配完毕，接下来我们如何上演呢？</p>
<p><img src="https://img.alicdn.com/tps/TB1NzjHNVXXXXa6XpXXXXXXXXXX-1399-581.png" alt="Alt text"></p>
<p>相信大家看了上图一(yi)定(lian)知(meng)道(bi)redux数据是如何流动了吧。<br>好了，不扯淡了，我们来看看正版的Redux数据流图是怎么样的吧。</p>
<p><img src="https://img.alicdn.com/tps/TB1tRDBNVXXXXX9XFXXXXXXXXXX-799-391.png" alt="Alt text"></p>
<ol>
<li>View触发dispatch</li>
<li>进入reducer，修改store中的state</li>
<li>将新的state和props传入handleChange中，生成更符合页面的props</li>
<li>传给原始根节点重新render</li>
</ol>
<p>有没有觉得还是上面的图比较形象？哈哈<br>好了，回到正题，既然Redux如此复杂，为啥还需要使用Redux？</p>
<p>我认为Redux的优点：</p>
<ol>
<li>Redux把流程规范了，统一渲染根节点虽然对代码管理上规范了一些,只要有需要显示数据的组件，当相关数据更新时都会自动进行更新。</li>
<li>减少手动编码量，提高编码效率。</li>
<li>Redux 会更加注重数据的单一流向性，所有的 Component </li>
</ol>
<p>都能变的沒有state，还有可以保留Store的历史、回放、修改、以后端进行完全同步等等，同时与后端做<strong>同构</strong>也是相当好的选择。<br>Redux 让程序只拥有一个Listener，不需要在每一个组件中进行自己的state管理，一切所需的数据都从上游作为<strong>props</strong>传进來了。</p>
<p>Redux的缺点：<br>学习成本比较高，严格的函数式思维比较难以转化，刚开始接触会觉得过程非常繁琐。</p>
<p>其实就像那篇文章里说的</p>
<blockquote>
<p>Redux库 它本身只是一系列的助手将 reducers “挂载”到全局唯一的 store 对象上。你可以根据你的喜好来选择是尽可能少，或尽可能多得使用 Redux。</p>
</blockquote>
<p>关于Redux如何使用？请听下回分解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章我只介绍3个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是Redux？&lt;/li&gt;
&lt;li&gt;为什么是Redux？&lt;/li&gt;
&lt;li&gt;Redux如何使用？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##什么是Redux?&lt;br&gt;你们可以看看官网的解释，&lt;br&gt;但是呢，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1JuYfNVXXXXbmaXXXXXXXXXXX-801-259.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;我想没有接触过的人一看肯定一脸懵逼。&lt;br&gt;那么什么是Redux呢？&lt;br&gt;一句话概括，&lt;strong&gt;redux只是一个实现了Flux思想的数据流框架。&lt;/strong&gt;&lt;br&gt;既然是一个数据流框架，那么数据是如何流动的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1kYfaNVXXXXcLaXXXXXXXXXXX-604-352.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://alisec-ued.github.io/tags/React/"/>
    
  </entry>
  
</feed>
